name: Build & Deploy

on:
  push:
    branches:
      - main

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  determine-services:
    name: Determine changed microservices
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      has_services: ${{ steps.set-matrix.outputs.has_services }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: List candidate services
        id: list
        run: |
          echo "services=auditoria autenticacion bff-movil bff-web clientes inventario logistica ordenes/commands/api ordenes/commands/handlers ordenes/queries/api ordenes/queries/projection productos proveedores reportes ventas" >> $GITHUB_OUTPUT

      - name: Detect changed paths
        id: changed
        shell: bash
        run: |
          # Get the previous commit
          if [[ "${{ github.event.before }}" == "0000000000000000000000000000000000000000" ]]; then
            # First push to branch, compare with main
            base="origin/main"
          else
            base="${{ github.event.before }}"
          fi
          head="${{ github.sha }}"
          
          git diff --name-only "$base" "$head" > changed_files.txt || echo "src/" > changed_files.txt
          echo "Changed files:" && cat changed_files.txt || true

      - name: Build matrix from changes
        id: set-matrix
        shell: bash
        run: |
          # Split services string into array
          IFS=' ' read -ra candidates <<< "${{ steps.list.outputs.services }}"
          declare -a selected=()
          
          if [[ -s changed_files.txt ]]; then
            for svc in "${candidates[@]}"; do
              if grep -qE "^src/${svc}/" changed_files.txt; then
                selected+=("${svc}")
              fi
            done
          fi

          # Build JSON array properly
          if [[ ${#selected[@]} -eq 0 ]]; then
            echo "No service changes detected"
            echo "matrix={\"service\": []}" >> $GITHUB_OUTPUT
            echo "has_services=false" >> $GITHUB_OUTPUT
          else
            json_services=$(printf '"%s",' "${selected[@]}")
            json_services="[${json_services%,}]"
            echo "Matrix services: ${json_services}"
            echo "matrix={\"service\": ${json_services}}" >> $GITHUB_OUTPUT
            echo "has_services=true" >> $GITHUB_OUTPUT
          fi

  build-and-push:
    name: Build & Push ${{ matrix.service }}
    needs: determine-services
    if: needs.determine-services.outputs.has_services == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.determine-services.outputs.matrix) }}
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev

      - name: Determine image tags
        id: tags
        run: |
          SERVICE_TAG=$(echo "${{ matrix.service }}" | tr '/' '-')
          echo "service_tag=${SERVICE_TAG}" >> $GITHUB_OUTPUT
          echo "env_tag=latest" >> $GITHUB_OUTPUT

      - name: Build and Push Docker Image
        env:
          PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          SERVICE_NAME: ${{ matrix.service }}
          SERVICE_TAG: ${{ steps.tags.outputs.service_tag }}
          ENV_TAG: ${{ steps.tags.outputs.env_tag }}
        run: |
          IMAGE_NAME="us-central1-docker.pkg.dev/${PROJECT_ID}/medisupply/${SERVICE_TAG}"
          
          # Build the image
          docker build -f src/${SERVICE_NAME}/Dockerfile \
            -t ${IMAGE_NAME}:${ENV_TAG} \
            -t ${IMAGE_NAME}:${{ github.sha }} \
            src/${SERVICE_NAME}
          
          # Push both tags
          docker push ${IMAGE_NAME}:latest
          docker push ${IMAGE_NAME}:${{ github.sha }}
          
          echo "✅ Published ${SERVICE_TAG}:latest"
          echo "✅ Published ${SERVICE_TAG}:${{ github.sha }}"

  deploy-to-gke:
    name: Deploy ${{ matrix.service }} to GKE
    needs: [determine-services, build-and-push]
    if: needs.determine-services.outputs.has_services == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.determine-services.outputs.matrix) }}
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine service manifest
        id: manifest
        run: |
          SERVICE_TAG=$(echo "${{ matrix.service }}" | tr '/' '-')
          MANIFEST_PATH="k8s/microservices/${SERVICE_TAG}.yaml"
          
          if [[ -f "${MANIFEST_PATH}" ]]; then
            echo "manifest_path=${MANIFEST_PATH}" >> $GITHUB_OUTPUT
            echo "manifest_exists=true" >> $GITHUB_OUTPUT
            echo "✅ Found manifest: ${MANIFEST_PATH}"
          else
            echo "manifest_exists=false" >> $GITHUB_OUTPUT
            echo "⚠️  No manifest found at ${MANIFEST_PATH}"
          fi

      - name: Authenticate to Google Cloud
        if: steps.manifest.outputs.manifest_exists == 'true'
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        if: steps.manifest.outputs.manifest_exists == 'true'
        uses: google-github-actions/setup-gcloud@v2

      - name: Install GKE Auth Plugin
        if: steps.manifest.outputs.manifest_exists == 'true'
        run: |
          gcloud components install gke-gcloud-auth-plugin

      - name: Configure kubectl
        if: steps.manifest.outputs.manifest_exists == 'true'
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} \
            --region=${{ secrets.GKE_REGION }} \
            --project=${{ secrets.GCP_PROJECT_ID }}

      - name: Deploy to GKE
        if: steps.manifest.outputs.manifest_exists == 'true'
        run: |
          SERVICE_TAG=$(echo "${{ matrix.service }}" | tr '/' '-')
          
          # Apply the manifest
          kubectl apply -f ${{ steps.manifest.outputs.manifest_path }}
          
          # Wait for rollout to complete (with timeout)
          kubectl rollout status deployment/${SERVICE_TAG}-service --timeout=5m || true
          
          echo "✅ Deployed ${SERVICE_TAG} to GKE"

      - name: Skip deployment (no manifest)
        if: steps.manifest.outputs.manifest_exists == 'false'
        run: |
          echo "⏭️  Skipping deployment - no K8s manifest found for ${{ matrix.service }}"

  deploy-complete:
    name: Deployment Complete
    needs: [determine-services, build-and-push, deploy-to-gke]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check if services were changed
        if: needs.determine-services.outputs.has_services == 'false'
        run: |
          echo "ℹ️  No service changes detected - skipping builds and deployments"
      
      - name: Check build status
        if: needs.determine-services.outputs.has_services == 'true' && needs.build-and-push.result != 'success'
        run: |
          echo "❌ One or more builds failed or were cancelled"
          exit 1
      
      - name: Check deployment status
        if: needs.determine-services.outputs.has_services == 'true' && needs.deploy-to-gke.result != 'success'
        run: |
          echo "❌ One or more deployments failed or were cancelled"
          exit 1
      
      - name: Deployment successful
        run: |
          echo "✅ Deployment workflow completed successfully"

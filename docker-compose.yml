services:
  pg_db:
    container_name: pg_db
    image: postgres:17.6
    environment:
      POSTGRES_DB: "medisupply-db"
      POSTGRES_USER: "root"
      POSTGRES_PASSWORD: "medisupply-pass"
      POSTGRES_ROOT_PASSWORD: "medisupply-pass"
    networks:
      - medisupply-network
    volumes:
      - ./data/postgresql/:/var/lib/postgresql/data
    ports:
      - "5480:5432"

  redis:
    image: redis
    volumes:
      - ./data/redis:/data
    ports:
      - "6379:6379"
    networks:
      - medisupply-network

  order-command-api:
    profiles: ["ordenes", "dev"]
    build:
      context: ./src/ordenes/commands/api
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
      - "5678:5678"
    command:
      - sh
      - -c
      - |
        python -Xfrozen_modules=off -m debugpy --listen 0.0.0.0:5678 -m fastapi run main.py --port 3000 --reload
    environment:
      - GOOGLE_CLOUD_PROJECT_ID=tutoriales-miso
      - PUBSUB_TOPIC_NAME=create-order-command
    volumes:
      - ./src/ordenes/commands/api:/app
    networks:
      - medisupply-network
    depends_on:
      - pg_db

  order-command-handler:
    profiles: ["ordenes", "dev"]
    build:
      context: ./src/ordenes/commands/handlers
      dockerfile: Dockerfile
    ports:
      - "3001:3000"
      - "5679:5678"
    command:
      - sh
      - -c
      - |
        python -Xfrozen_modules=off -m debugpy --listen 0.0.0.0:5678 -m fastapi run main.py --port 3000 --reload
    environment:
      - GOOGLE_CLOUD_PROJECT_ID=tutoriales-miso
      - PUBSUB_TOPIC_NAME=order-created
    volumes:
      - ./src/ordenes/commands/handlers:/app
    networks:
      - medisupply-network
    depends_on:
      - pg_db

  order-query-api:
    profiles: ["ordenes", "dev"]
    build:
      context: ./src/ordenes/queries/api
      dockerfile: Dockerfile
    ports:
      - "3002:3000"
      - "5680:5678"
    command:
      - sh
      - -c
      - |
        python -Xfrozen_modules=off -m debugpy --listen 0.0.0.0:5678 -m fastapi run main.py --port 3000 --reload
    environment:
      - GOOGLE_CLOUD_PROJECT_ID=tutoriales-miso
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
    volumes:
      - ./src/ordenes/queries/api:/app
    networks:
      - medisupply-network
    depends_on:
      - pg_db
      - redis

  order-query-projection:
    profiles: ["ordenes", "dev"]
    build:
      context: ./src/ordenes/queries/projection
      dockerfile: Dockerfile
    ports:
      - "3003:3000"
      - "5681:5678"
    command:
      - sh
      - -c
      - |
        python -Xfrozen_modules=off -m debugpy --listen 0.0.0.0:5678 -m fastapi run main.py --port 3000 --reload
    environment:
      - GOOGLE_CLOUD_PROJECT_ID=tutoriales-miso
    volumes:
      - ./src/ordenes/queries/projection:/app
    networks:
      - medisupply-network
    depends_on:
      - pg_db

  productos-service:
    profiles: ["productos", "dev"]
    build:
      context: ./src/productos
      dockerfile: Dockerfile
    ports:
      - "3004:3000"
      - "5690:5678"
    command:
      - sh
      - -c
      - |
        python -Xfrozen_modules=off -m debugpy --listen 0.0.0.0:5678 -m fastapi run main.py --port 3000 --reload
    environment:
      - GOOGLE_CLOUD_PROJECT_ID=tutoriales-miso
    volumes:
      - ./src/productos:/app
    networks:
      - medisupply-network
    depends_on:
      - pg_db
      - redis

  proveedores-service:
    profiles: ["proveedores", "dev"]
    build:
      context: ./src/proveedores
      dockerfile: Dockerfile
    ports:
      - "3005:3000"
      - "5691:5678"
    command:
      - sh
      - -c
      - |
        python -Xfrozen_modules=off -m debugpy --listen 0.0.0.0:5678 -m fastapi run main.py --port 3000 --reload
    environment:
      - GOOGLE_CLOUD_PROJECT_ID=tutoriales-miso
    volumes:
      - ./src/proveedores:/app
    networks:
      - medisupply-network
    depends_on:
      - pg_db
      - redis

  reportes-service:
    profiles: ["reportes", "dev"]
    build:
      context: ./src/reportes
      dockerfile: Dockerfile
    ports:
      - "3006:3000"
      - "5692:5678"
    command:
      - sh
      - -c
      - |
        python -Xfrozen_modules=off -m debugpy --listen 0.0.0.0:5678 -m fastapi run main.py --port 3000 --reload
    environment:
      - GOOGLE_CLOUD_PROJECT_ID=tutoriales-miso
    volumes:
      - ./src/reportes:/app
    networks:
      - medisupply-network
    depends_on:
      - pg_db
      - redis

  logistica-service:
    profiles: ["logistica", "dev"]
    build:
      context: ./src/logistica
      dockerfile: Dockerfile
    ports:
      - "3007:3000"
      - "5693:5678"
    command:
      - sh
      - -c
      - |
        python -Xfrozen_modules=off -m debugpy --listen 0.0.0.0:5678 -m fastapi run main.py --port 3000 --reload
    environment:
      - GOOGLE_CLOUD_PROJECT_ID=tutoriales-miso
    volumes:
      - ./src/logistica:/app
    networks:
      - medisupply-network
    depends_on:
      - pg_db
      - redis
  
  inventario-service:
    profiles: ["inventario", "dev"]
    build:
      context: ./src/inventario
      dockerfile: Dockerfile
    ports:
      - "3008:3000"
      - "5694:5678"
    command:
      - sh
      - -c
      - |
        python -Xfrozen_modules=off -m debugpy --listen 0.0.0.0:5678 -m fastapi run main.py --port 3000 --reload
    environment:
      - GOOGLE_CLOUD_PROJECT_ID=tutoriales-miso
    volumes:
      - ./src/inventario:/app
    networks:
      - medisupply-network
    depends_on:
      - pg_db
      - redis
  
  ventas-service:
    profiles: ["ventas", "dev"]
    build:
      context: ./src/ventas
      dockerfile: Dockerfile
    ports:
      - "3009:3000"
      - "5695:5678"
    command:
      - sh
      - -c
      - |
        python -Xfrozen_modules=off -m debugpy --listen 0.0.0.0:5678 -m fastapi run main.py --port 3000 --reload
    environment:
      - GOOGLE_CLOUD_PROJECT_ID=tutoriales-miso
    volumes:
      - ./src/ventas:/app
    networks:
      - medisupply-network
    depends_on:
      - pg_db
      - redis
  
  clientes-service:
    profiles: ["clientes", "dev"]
    build:
      context: ./src/clientes
      dockerfile: Dockerfile
    ports:
      - "3010:3000"
      - "5696:5678"
    command:
      - sh
      - -c
      - |
        python -Xfrozen_modules=off -m debugpy --listen 0.0.0.0:5678 -m fastapi run main.py --port 3000 --reload
    environment:
      - GOOGLE_CLOUD_PROJECT_ID=tutoriales-miso
    volumes:
      - ./src/clientes:/app
    networks:
      - medisupply-network
    depends_on:
      - pg_db
      - redis

  auditoria-service:
    profiles: ["auditoria", "dev"]
    build:
      context: ./src/auditoria
      dockerfile: Dockerfile
    ports:
      - "3011:3000"
      - "5697:5678"
    command:
      - sh
      - -c
      - |
        python -Xfrozen_modules=off -m debugpy --listen 0.0.0.0:5678 -m fastapi run main.py --port 3000 --reload
    environment:
      - GOOGLE_CLOUD_PROJECT_ID=tutoriales-miso
    volumes:
      - ./src/auditoria:/app
    networks:
      - medisupply-network
    depends_on:
      - pg_db
      - redis
  
  autenticacion-service:
    profiles: ["autenticacion", "dev"]
    build:
      context: ./src/autenticacion
      dockerfile: Dockerfile
    ports:
      - "3012:3000"
      - "5698:5678"
    command:
      - sh
      - -c
      - |
        python -Xfrozen_modules=off -m debugpy --listen 0.0.0.0:5678 -m fastapi run main.py --port 3000 --reload
    environment:
      - GOOGLE_CLOUD_PROJECT_ID=tutoriales-miso
    volumes:
      - ./src/autenticacion:/app
    networks:
      - medisupply-network
    depends_on:
      - pg_db
      - redis

networks:
  medisupply-network:
    driver: bridge
